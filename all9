import android.graphics.Point;

/**
 * 弧形布局类，不支持位置变换效果
 *
 * @author zwx697580
 * @version 1.0.0
 * @since 2019-05-22
 */
public class CalculateRadianUtils {
    private static final int FACTOR = 2;

    private static final float BOTTOM_CIRCLE_DEGREE = 90;

    private static final float HALF_CIRCLE_DEGREE = 180;

    private static final float TOP_CIRCLE_DEGREE = 270;

    private static final float ONE_CIRCLE_DEGREE = 360;

    private static final float HALF_SCREEN_SIZE = 227;

    /**
     * 计算开始角度
     *
     * @param centerDegree 中心角度
     * @return 开始角度
     */
    public static float calculateStartAngle(float centerDegree, float width) {
        return centerDegree - calculateSweepDegree(width) / FACTOR;
    }

    /**
     * 计算固定宽度对应的角度
     *
     * @param width 需要计算的宽度
     * @return width对应的角度
     */
    public static float calculateSweepDegree(float width) {
        return (float) (width * ONE_CIRCLE_DEGREE / (FACTOR * Math.PI * HALF_SCREEN_SIZE));
    }

    /**
     * 计算对应角度上的点的开始坐标
     *
     * @param angle 对应角度
     * @param radian 右下角到圆心距离
     * @param width 控件宽度
     * @return
     */
    public static Point calculateStartPoint(float angle, float radian, float width) {
        Point startPoint = new Point();
        startPoint.x = (int) calcStartX(angle, radian, width);
        startPoint.y = (int) calcStartY(angle, radian, width);
        return startPoint;
    }

    private static float calcStartX(float angle, float radian, float width) {
        float cosData = 0;
        float tempAngle = angle;
        if (tempAngle >= ONE_CIRCLE_DEGREE) {
            tempAngle = tempAngle % ONE_CIRCLE_DEGREE;
        }
        if (tempAngle >= TOP_CIRCLE_DEGREE && tempAngle <= ONE_CIRCLE_DEGREE) {
            cosData = (float) Math.cos(changeDegreeToRadian(ONE_CIRCLE_DEGREE - tempAngle));
        } else if (tempAngle <= TOP_CIRCLE_DEGREE && tempAngle > HALF_CIRCLE_DEGREE) {
            cosData = -(float) Math.cos(changeDegreeToRadian(tempAngle - HALF_CIRCLE_DEGREE));
        } else if (tempAngle <= HALF_CIRCLE_DEGREE && tempAngle > BOTTOM_CIRCLE_DEGREE) {
            cosData = -(float) Math.cos(changeDegreeToRadian(HALF_CIRCLE_DEGREE - tempAngle));
        } else if (tempAngle >= 0 && tempAngle <= BOTTOM_CIRCLE_DEGREE) {
            cosData = (float) Math.cos(changeDegreeToRadian(tempAngle));
        }
        return HALF_SCREEN_SIZE + radian * cosData - width / FACTOR;
    }

    private static float calcStartY(float angle, float radian, float width) {
        float sinData = 0;
        float tempAngle = angle;
        if (tempAngle >= ONE_CIRCLE_DEGREE) {
            tempAngle = tempAngle % ONE_CIRCLE_DEGREE;
        }
        if (tempAngle >= 0 && tempAngle <= HALF_CIRCLE_DEGREE) {
            sinData = (float) Math.abs(Math.sin(changeDegreeToRadian(tempAngle)));
        } else if (tempAngle > HALF_CIRCLE_DEGREE && tempAngle <= ONE_CIRCLE_DEGREE) {
            sinData = -(float) Math.sin(changeDegreeToRadian(ONE_CIRCLE_DEGREE - tempAngle));
        }
        return HALF_SCREEN_SIZE + radian * sinData - width / FACTOR;
    }

    /**
     * 计算角度对应的弧度
     *
     * @param degree 需要计算的角度
     * @return 对应的弧度
     */
    public static float changeDegreeToRadian(float degree) {
        return (float) (degree * Math.PI / HALF_CIRCLE_DEGREE);
    }

    /**
     * 计算旋转角度
     *
     * @param angle 控件中心角度
     * @return 旋转角度
     */
    public static float calculateRotateDegree(float angle) {
        float tempAngle = angle;
        if (tempAngle >= ONE_CIRCLE_DEGREE) {
            tempAngle = tempAngle % ONE_CIRCLE_DEGREE;
        }

        if (tempAngle >= BOTTOM_CIRCLE_DEGREE && tempAngle < TOP_CIRCLE_DEGREE) {
            return tempAngle - TOP_CIRCLE_DEGREE;
        } else if (tempAngle > TOP_CIRCLE_DEGREE && tempAngle < ONE_CIRCLE_DEGREE) {
            return tempAngle - TOP_CIRCLE_DEGREE;
        } else if (tempAngle < BOTTOM_CIRCLE_DEGREE && tempAngle > 0) {
            return BOTTOM_CIRCLE_DEGREE + tempAngle;
        } else {
            return 0;
        }
    }
}







/**
 * 公共常量类
 *
 * @author swx405947
 * @version 1.0.0
 * @since 2019-01-22
 */
public class CommonConstantsUtil {
    // ====================================== 常量数字 start ========================================

    /** 数字常量 0 */
    public static final int NUMBER_ZERO = 0;

    /** 数字常量 1 */
    public static final int NUMBER_ONE = 1;

    /** 数字常量 2 */
    public static final int NUMBER_TWO = 2;

    /** 数字常量 3 */
    public static final int NUMBER_THREE = 3;

    /** 数字常量 4 */
    public static final int NUMBER_FOUR = 4;

    /** 数字常量 5 */
    public static final int NUMBER_FIVE = 5;

    /** 数字常量 6 */
    public static final int NUMBER_SIX = 6;

    /** 数字常量 7 */
    public static final int NUMBER_SEVEN = 7;

    /** 数字常量 8 */
    public static final int NUMBER_EIGHT = 8;

    /** 数字常量 9 */
    public static final int NUMBER_NINE = 9;

    /** 数字常量 10 */
    public static final int NUMBER_TEN = 10;

    /** 数字常量 11 */
    public static final int NUMBER_ELEVEN = 11;

    /** 数字常量 12 */
    public static final int NUMBER_TWELVE = 12;

    /** 数字常量 28 */
    public static final int NUMBER_TWENTY_EIGHT = 28;

    /** 数字常量 29 */
    public static final int NUMBER_TWENTY_NINE = 29;

    /** 数字常量 30 */
    public static final int NUMBER_THIRTY = 30;

    /** 数字常量 31 */
    public static final int NUMBER_THIRTY_ONE = 31;

    /** 数字常量 50 */
    public static final int NUMBER_FIFTY = 50;

    /**
    * 数字常量 60
    */
    public static final int NUMBER_SIXTY = 60;

    /** 数字常量 90 */
    public static final int NUMBER_NINETY = 90;

    /** 常量360F */
    public static final float NUMBER_THREE_HUNDRED_AND_SIX = 360F;

    // ====================================== 常量数字 end ==========================================

    // ====================================== 布局相关 start ========================================
    /** item title */
    public static final int RECYCLER_VIEW_TYPE_TITLE = 0;

    /** item item */
    public static final int RECYCLER_VIEW_TYPE_ITEM = 1;

    /** item header or footer */
    public static final int RECYCLER_VIEW_HEADER_FOOTER = 2;

    // ====================================== 布局相关 end ==========================================

    // ====================================== extra start ==========================================
    /** container index */
    public static final String EXTRA_CONTAINER_INDEX = "containerIndex";

    /** assetPackage object */
    public static final String EXTRA_ASSET_PACKAGE = "assetPackage";
    // ====================================== extra end ============================================

    // ====================================== action start =========================================
    /** action */
    public static final String ACTION_START_WIDGET_OPTION_LIST = "com.huawei.wearable.watchface.WIDGETOPTIONLIST";

    /** 启动世界时间设置 */
    public static final String ACTION_START_WORLD_TIME_SETTING = "com.huawei.wearable.watchface.WORLDTIMESETTING";

    // ====================================== action end ===========================================

    /** SCREEN_OFF and HOME_KEY permission */
    public static final String WATCH_FACE_CONTACT_PERMISSION = "com.huawei.wearable.watchface.permission.CONTACT";

    /** action HOME_KEY */
    public static final String ACTION_HOME_KEY = "homekey";

    /** action HOME_KEY reason */
    public static final String ACTION_HOME_KEY_REASON = "reason";

    // ====================================== 第三方APP相关 start ===================================
    /** 运动健康APP包名 */
    public static final String APPLICATION_ID_HEALTH = "com.huawei.health";

    /** 运动健康APP---心率界面 */
    public static final String HEART_RATE_ACTIVITY = "com.huawei.bone.view.heartrate.activity.HeartRateMainActivity";

    /** 运动健康APP---步数、活动时间、爬楼、热量等数据统计界面 */
    public static final String DAILY_TRACK_ACTIVITY = "com.huawei.bone.view.dailytrack.activity.DailyTrackMainActivity";

    // ====================================== 第三方APP相关 end =====================================
    private CommonConstantsUtil() {
    }
}










/**
 * 功能描述
 *
 * @author m00230717
 * @version 1.0.0
 * @since 2019-03-20
 */
public class CustomizeUtil {
    private static final String TAG = "CustomizeUtil";

    private CustomizeUtil() {
    }

    /**
     * 根据label获取tab的名字
     *
     * @param context 上下文对象
     * @param label 标签
     * @return tab名
     */
    public static String getTabNameByLabel(@NonNull Context context, @NonNull String label) {
        String tab = "";
        switch (label) {
            case UnitConstants.LABEL_BACKGROUND:
                tab = context.getResources().getString(R.string.tab_background);
                break;
            case UnitConstants.LABEL_COLOR:
                tab = context.getResources().getString(R.string.tab_color);
                break;
            case UnitConstants.LABEL_DIAL:
                tab = context.getResources().getString(R.string.tab_dial);
                break;
            case UnitConstants.LABEL_TIME:
                tab = context.getResources().getString(R.string.tab_hand);
                break;
            case UnitConstants.LABEL_WIDGET:
                tab = context.getResources().getString(R.string.tab_module);
                break;
            case UnitConstants.STYLES:
                tab = context.getResources().getString(R.string.tab_style);
                break;
            case UnitConstants.LABEL_FONT:
                tab = context.getResources().getString(R.string.tab_font);
                break;
            case UnitConstants.LABEL_POSITION:
                tab = context.getResources().getString(R.string.tab_position);
                break;
            default:
                break;
        }
        return tab;
    }

    /**
     * 获取数据的一级分类
     *
     * @param context 上下文对象
     * @param subType 子类名称
     * @return 一级分类
     */
    public static String getDataMainTypeBySubType(@NonNull Context context, @NonNull String subType) {
        String mainType = "";
        switch (subType) {
            case DataConstantUtils.DATA_TYPE_STEP:
            case DataConstantUtils.DATA_TYPE_CALORIES:
            case DataConstantUtils.DATA_TYPE_HEART_RATE:
            case DataConstantUtils.DATA_TYPE_CLIMB_STAIR:
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR:
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY:
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR_TEXT:
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY_TEXT:
            case DataConstantUtils.DATA_TYPE_DISTANCE:
            case DataConstantUtils.DATA_TYPE_PRESSURE_SPORT:
            case DataConstantUtils.DATA_TYPE_MAX_OXYGEN_UPTAKE:
                mainType = context.getResources().getString(R.string.type_health);
                break;
            case DataConstantUtils.DATA_TYPE_AIR_QUALITY:
            case DataConstantUtils.DATA_TYPE_WEATHER:
            case DataConstantUtils.DATA_TYPE_PRESSURE:
                mainType = context.getResources().getString(R.string.type_weather);
                break;
            case DataConstantUtils.DATA_TYPE_BATTERY:
                mainType = context.getResources().getString(R.string.type_general);
                break;
            case DataConstantUtils.DATA_TYPE_TIME_DAY:
            case DataConstantUtils.DATA_TYPE_TIME_DAY_CHINA:
            case DataConstantUtils.DATA_TYPE_MONTH_DAY:
            case DataConstantUtils.DATA_TYPE_MONTH_WEEK:
            case DataConstantUtils.DATA_TYPE_MONTH_DAY_WEEK:
            case DataConstantUtils.DATA_TYPE_CALENDAR:
            case DataConstantUtils.DATA_TYPE_WORLD_TIME:
            case DataConstantUtils.DATA_TYPE_SECOND_HAND:
            case DataConstantUtils.DATA_TYPE_MOON_PHASE:
            case DataConstantUtils.DATA_TYPE_SUNRISE_SUNSET:
            case DataConstantUtils.DATA_TYPE_SECONDS_DEGREE:
            case DataConstantUtils.VALUE_TYPE_DATA_DAY:
            case DataConstantUtils.VALUE_TYPE_DATA_WEEK:
                mainType = context.getResources().getString(R.string.type_clock);
                break;
            default:
                break;
        }
        HwLogUtil.d(TAG, "getDataMainTypeBySubType() subType=" + subType + ",mainType=" + mainType);
        return mainType;
    }

    /**
     * 获取数据名称
     *
     * @param context 上下文对象
     * @param subType 子类名称
     * @return 数据名称
     */
    public static String getDataNameBySubType(@NonNull Context context, @NonNull String subType) {
        String name;
        switch (subType) {
            case DataConstantUtils.DATA_TYPE_STEP:
                name = context.getResources().getString(R.string.module_step);
                break;
            case DataConstantUtils.DATA_TYPE_CALORIES:
                name = context.getResources().getString(R.string.module_calories);
                break;
            case DataConstantUtils.DATA_TYPE_HEART_RATE:
                name = context.getResources().getString(R.string.module_heart_rate);
                break;
            case DataConstantUtils.DATA_TYPE_AIR_QUALITY:
                name = context.getResources().getString(R.string.module_air_quality);
                break;
            case DataConstantUtils.DATA_TYPE_WEATHER:
                name = context.getResources().getString(R.string.type_weather);
                break;
            case DataConstantUtils.DATA_TYPE_PRESSURE:
                name = context.getResources().getString(R.string.module_pressure);
                break;
            case DataConstantUtils.DATA_TYPE_BATTERY:
                name = context.getResources().getString(R.string.module_data_battery);
                break;
            default:
                name = getDataNameBySubTypeInternal(context, subType);
                break;
        }
        HwLogUtil.d(TAG, "getDataNameBySubType() subType=" + subType + ",name=" + name);
        return name;
    }

    private static String getDataNameBySubTypeInternal(@NonNull Context context, @NonNull String subType) {
        String name;
        switch (subType) {
            case DataConstantUtils.DATA_TYPE_CALENDAR:
                name = context.getResources().getString(R.string.module_calendar);
                break;
            case DataConstantUtils.DATA_TYPE_WORLD_TIME:
                name = context.getResources().getString(R.string.module_world_time);
                break;
            case DataConstantUtils.DATA_TYPE_SECOND_HAND:
                name = context.getResources().getString(R.string.module_second_hand);
                break;
            case DataConstantUtils.DATA_TYPE_MOON_PHASE:
                name = context.getResources().getString(R.string.module_moon_phase);
                break;
            case DataConstantUtils.DATA_TYPE_SUNRISE_SUNSET:
                name = context.getResources().getString(R.string.module_sunrise_and_sunset);
                break;
            case DataConstantUtils.DATA_TYPE_CLIMB_STAIR:
                name = context.getResources().getString(R.string.module_climb_stair);
                break;
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR:
                name = context.getResources().getString(R.string.module_health_stand_num);
                break;
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY:
                name = context.getResources().getString(R.string.module_health_sport_times);
                break;
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR_TEXT:
                name = context.getResources().getString(R.string.module_health_stand_num);
                break;
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY_TEXT:
                name = context.getResources().getString(R.string.module_health_sport_times);
                break;
            case DataConstantUtils.DATA_TYPE_DISTANCE:
                name = context.getResources().getString(R.string.module_distance);
                break;
            case DataConstantUtils.DATA_TYPE_PRESSURE_SPORT:
                name = context.getResources().getString(R.string.module_pressure_sport);
                break;
            case DataConstantUtils.DATA_TYPE_MAX_OXYGEN_UPTAKE:
                name = context.getResources().getString(R.string.module_max_oxygen_uptake);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_1:
                name = context.getString(R.string.module_calendar_style_1);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_2:
                name = context.getString(R.string.module_calendar_style_2);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_3:
                name = context.getString(R.string.module_calendar_style_3);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_4:
                name = context.getString(R.string.module_calendar_style_4);
                break;
            case DataConstantUtils.DATA_DAY:
                name = context.getString(R.string.module_day);
                break;
            case DataConstantUtils.DATA_WEEK:
                name = context.getString(R.string.module_week);
                break;
            case DataConstantUtils.DATA_TYPE_SECONDS_DEGREE:
                name = context.getString(R.string.module_health_seconds_degree);
                break;
            case DataConstantUtils.DATA_TYPE_MONTH_DAY:
                name = context.getString(R.string.module_day);
                break;
            case DataConstantUtils.DATA_TYPE_MONTH_WEEK:
                name = context.getString(R.string.module_week);
                break;
            case DataConstantUtils.DATA_TYPE_MONTH_DAY_WEEK:
                name = context.getString(R.string.module_calendar);
                break;
            case DataConstantUtils.DATA_TYPE_TIME_DAY:
                name = context.getString(R.string.module_time_date);
                break;
            case DataConstantUtils.DATA_TYPE_TIME_DAY_CHINA:
                name = context.getString(R.string.module_lunar_date);
                break;
            case DataConstantUtils.DATA_TYPE_CONTACT:
                name = context.getString(R.string.module_contact);
                break;
            default:
                name = context.getResources().getString(R.string.module_none);
                break;
        }
        HwLogUtil.d(TAG, "getDataNameBySubTypeInternal() subType=" + subType + ",name=" + name);
        return name;
    }

    /**
     * 功能列表界面获取正常状态下的图片资源
     *
     * @param context 上下文对象
     * @param subType 子类名称
     * @return 正常状态的图片资源
     */
    public static Drawable getDataDrawableBySubType(@NonNull Context context, @NonNull String subType) {
        Drawable drawableRes = context.getResources().getDrawable(R.drawable.nothing_normal, null);
        switch (subType) {
            case DataConstantUtils.DATA_TYPE_STEP:
                drawableRes = context.getResources().getDrawable(R.drawable.step_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALORIES:
                drawableRes = context.getResources().getDrawable(R.drawable.kcal_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_HEART_RATE:
                drawableRes = context.getResources().getDrawable(R.drawable.heart_rate_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_AIR_QUALITY:
                drawableRes = context.getResources().getDrawable(R.drawable.aqi_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_WEATHER:
                drawableRes = context.getResources().getDrawable(R.drawable.weather_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_PRESSURE:
                drawableRes = context.getResources().getDrawable(R.drawable.pressure_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_BATTERY:
                drawableRes = context.getResources().getDrawable(R.drawable.battery_normal, null);
                break;
            case DataConstantUtils.VALUE_TYPE_DATA_DAY:
            case DataConstantUtils.VALUE_TYPE_DATA_WEEK:
            case DataConstantUtils.DATA_TYPE_CALENDAR:
                drawableRes = context.getResources().getDrawable(R.drawable.calendar_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_WORLD_TIME:
                drawableRes = context.getResources().getDrawable(R.drawable.world_time_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_SECOND_HAND:
                drawableRes = context.getResources().getDrawable(R.drawable.date_a1_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_MOON_PHASE:
                drawableRes = context.getResources().getDrawable(R.drawable.moon_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_SUNRISE_SUNSET:
                drawableRes = context.getResources().getDrawable(R.drawable.sunrise_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_SECONDS_DEGREE:
                drawableRes = context.getResources().getDrawable(R.drawable.second_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CLIMB_STAIR:
                drawableRes = context.getResources().getDrawable(R.drawable.upstairs_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_PRESSURE_SPORT:
                drawableRes = context.getResources().getDrawable(R.drawable.pressure_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_DISTANCE:
                drawableRes = context.getResources().getDrawable(R.drawable.distance_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR:
                drawableRes = context.getResources().getDrawable(R.drawable.activity_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY:
                drawableRes = context.getResources().getDrawable(R.drawable.middle_high_strength_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_ACTIVITY_HOUR_TEXT:
                drawableRes = context.getResources().getDrawable(R.drawable.activity_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_MIDDLE_HIGH_INTENSITY_TEXT:
                drawableRes = context.getResources().getDrawable(R.drawable.middle_high_strength_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_MAX_OXYGEN_UPTAKE:
                drawableRes = context.getResources().getDrawable(R.drawable.max_oxygen_uptake_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_1:
                drawableRes = context.getResources().getDrawable(R.drawable.date_d1_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_2:
                drawableRes = context.getResources().getDrawable(R.drawable.date_b1_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_3:
                drawableRes = context.getResources().getDrawable(R.drawable.date_c1_normal, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_4:
                drawableRes = context.getResources().getDrawable(R.drawable.date_a1_normal, null);
                break;
            default:
                break;
        }
        return drawableRes;
    }

    /**
     * 功能列表界面获取选中状态的图片资源
     *
     * @param context 上下文对象
     * @param subType 子类名称
     * @return 选中状态的图片资源
     */
    public static Drawable getChoiceDataDrawableBySubType(@NonNull Context context, @NonNull String subType) {
        Drawable drawableRes = context.getResources().getDrawable(R.drawable.nothing_choice, null);
        switch (subType) {
            case DataConstantUtils.DATA_TYPE_STEP:
                drawableRes = context.getResources().getDrawable(R.drawable.step_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALORIES:
                drawableRes = context.getResources().getDrawable(R.drawable.kcal_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_HEART_RATE:
                drawableRes = context.getResources().getDrawable(R.drawable.heart_rate_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_AIR_QUALITY:
                drawableRes = context.getResources().getDrawable(R.drawable.aqi_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_WEATHER:
                drawableRes = context.getResources().getDrawable(R.drawable.weather_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_PRESSURE:
                drawableRes = context.getResources().getDrawable(R.drawable.pressure_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_BATTERY:
                drawableRes = context.getResources().getDrawable(R.drawable.battery_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR:
            case DataConstantUtils.VALUE_TYPE_DATA_DAY:
            case DataConstantUtils.VALUE_TYPE_DATA_WEEK:
                drawableRes = context.getResources().getDrawable(R.drawable.calendar_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_WORLD_TIME:
                drawableRes = context.getResources().getDrawable(R.drawable.world_time_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_SECOND_HAND:
                drawableRes = context.getResources().getDrawable(R.drawable.date_a1_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_MOON_PHASE:
                drawableRes = context.getResources().getDrawable(R.drawable.moon_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_SUNRISE_SUNSET:
                drawableRes = context.getResources().getDrawable(R.drawable.sunrise_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_SECONDS_DEGREE:
                drawableRes = context.getResources().getDrawable(R.drawable.second_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_1:
                drawableRes = context.getResources().getDrawable(R.drawable.date_d1_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_2:
                drawableRes = context.getResources().getDrawable(R.drawable.date_b1_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_3:
                drawableRes = context.getResources().getDrawable(R.drawable.date_c1_choice, null);
                break;
            case DataConstantUtils.DATA_TYPE_CALENDAR_4:
                drawableRes = context.getResources().getDrawable(R.drawable.date_a1_choice, null);
                break;
            default:
                break;
        }
        return drawableRes;
    }
}









import huawei.android.hwcolorpicker.HwColorPicker;

/**
 * Drawable工具类
 *
 * @author sWX405947
 * @since 2019-04-24
 */
public class DrawableUtil {
    private static final String TAG = "DrawableUtil";

    private DrawableUtil() {
    }

    /**
     * 获取显示区域，显示文字的颜色
     * @param bitmap bitmap
     * @param rect rect
     * @param clientType clientType
     * @return 颜色值
     */
    public static int obtainWidgetColor(Bitmap bitmap, Rect rect, HwColorPicker.ClientType clientType) {
        HwColorPicker.PickedColor pickedColor = HwColorPicker.processBitmap(bitmap, rect);
        if (pickedColor.getState() == -CommonConstantsUtil.NUMBER_ONE) {
            HwLogUtil.i(TAG, "check exception return ");
            return Color.WHITE;
        }
        if (pickedColor.getState() == 1) {
            HwLogUtil.i(TAG, "algorithm error return ");
            return Color.WHITE;
        }
        int color = pickedColor.get(HwColorPicker.ResultType.Widget);
        HwLogUtil.i(TAG, "color :" + color);
        return color;
    }

    /**
     * 获取显示区域，蒙版的颜色
     * @param bitmap bitmap
     * @param rect rect
     * @param clientType clientType
     * @return 颜色值
     */
    public static int obtainDomainColor(Bitmap bitmap, Rect rect, HwColorPicker.ClientType clientType) {
        HwColorPicker.PickedColor pickedColor = HwColorPicker.processBitmap(bitmap, rect);
        if (pickedColor.getState() == -CommonConstantsUtil.NUMBER_ONE) {
            HwLogUtil.i(TAG, "check exception return ");
            return Color.WHITE;
        }

        if (pickedColor.getState() == 1) {
            HwLogUtil.i(TAG, "algorithm error return ");
            return Color.WHITE;
        }
        int doMain = pickedColor.get(HwColorPicker.ResultType.Domain);
        HwLogUtil.i(TAG, "Domain :" + doMain);
        return doMain;
    }
}
